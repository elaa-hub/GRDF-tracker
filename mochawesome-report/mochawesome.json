{
  "stats": {
    "suites": 1,
    "tests": 0,
    "passes": 0,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-21T02:14:26.100Z",
    "end": "2025-06-21T02:15:34.911Z",
    "duration": 68811,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 1,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "6fa1d5c9-2528-4b4f-b8f2-0f0e5e63da2c",
      "title": "",
      "fullFile": "C:\\Users\\GIGABYTE\\Desktop\\PFE GRDF-tracker\\GRDF\\selenium-tests\\login.spec.js",
      "file": "\\selenium-tests\\login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "38b91433-67cf-4a06-acd7-2adc20c23beb",
          "title": "ðŸ§ª GRDF Client: Signaler une dÃ©faillance",
          "fullFile": "C:\\Users\\GIGABYTE\\Desktop\\PFE GRDF-tracker\\GRDF\\selenium-tests\\login.spec.js",
          "file": "\\selenium-tests\\login.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should login and signal a defaillance correctly\"",
              "fullTitle": "ðŸ§ª GRDF Client: Signaler une dÃ©faillance \"before all\" hook for \"should login and signal a defaillance correctly\"",
              "timedOut": true,
              "duration": 68802,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const options = new chrome.Options();\noptions.addArguments('--headless');\noptions.addArguments('--disable-gpu');\noptions.addArguments('--no-sandbox');\noptions.addArguments('--disable-dev-shm-usage');\ndriver = await new Builder()\n  .forBrowser('chrome')\n  .setChromeOptions(options)\n  .build();",
              "err": {
                "message": "Error: Timeout of 60000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\GIGABYTE\\Desktop\\PFE GRDF-tracker\\GRDF\\selenium-tests\\login.spec.js)",
                "estack": "Error: Timeout of 60000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\GIGABYTE\\Desktop\\PFE GRDF-tracker\\GRDF\\selenium-tests\\login.spec.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "48abd759-1b37-4209-a935-2f7b26ffaa2d",
              "parentUUID": "38b91433-67cf-4a06-acd7-2adc20c23beb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"ðŸ§ª GRDF Client: Signaler une dÃ©faillance\"",
              "fullTitle": "ðŸ§ª GRDF Client: Signaler une dÃ©faillance \"after all\" hook in \"ðŸ§ª GRDF Client: Signaler une dÃ©faillance\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) await driver.quit();",
              "err": {},
              "uuid": "08c42646-e26b-4c2c-9615-be0354464328",
              "parentUUID": "38b91433-67cf-4a06-acd7-2adc20c23beb",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should login and signal a defaillance correctly",
              "fullTitle": "ðŸ§ª GRDF Client: Signaler une dÃ©faillance should login and signal a defaillance correctly",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:4200');\nawait driver.findElement(By.name('email')).sendKeys('newclient@mail.com');\nawait driver.findElement(By.name('password')).sendKeys('12345');\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nawait driver.wait(until.urlContains('/client'), 5000);\nconst defaillanceBtn = await driver.wait(\n  until.elementLocated(By.xpath(\"//button[contains(text(),'Signaler une dÃ©faillance')]\")), 5000);\nawait defaillanceBtn.click();\nawait driver.wait(until.urlContains('/client/report-issue'), 5000);\nconst adresseInput = await driver.findElement(By.id('houseAddress'));\nawait adresseInput.clear();\nawait adresseInput.sendKeys('Rue de la Tour, 75001 Paris');\nconst urgenceSelect = await driver.findElement(By.id('urgence'));\nawait urgenceSelect.click();\nawait driver.findElement(By.xpath(\"//option[contains(text(),'Non urgente')]\")).click();\nconst descTextArea = await driver.findElement(By.id('description'));\nawait driver.executeScript(`\n  const textarea = arguments[0];\n  textarea.value = 'ProblÃ¨me de fuite de gaz dÃ©tectÃ©';\n  textarea.dispatchEvent(new Event('input', { bubbles: true }));\n`, descTextArea);\nconst value = await driver.findElement(By.id('description')).getAttribute('value');\nexpect(value).to.equal('ProblÃ¨me de fuite de gaz dÃ©tectÃ©');\nconst submitBtn = await driver.findElement(By.css('button[type=\"submit\"]'));\nawait submitBtn.click();\nawait driver.wait(until.urlContains('/client/demander-technicien'), 5000);\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl).to.include('/client/demander-technicien');",
              "err": {},
              "uuid": "f69d9485-634d-4632-81f3-72fdacff129e",
              "parentUUID": "38b91433-67cf-4a06-acd7-2adc20c23beb",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f69d9485-634d-4632-81f3-72fdacff129e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}