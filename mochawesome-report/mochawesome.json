{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-21T00:32:36.895Z",
    "end": "2025-06-21T00:32:45.659Z",
    "duration": 8764,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "14788e5e-740e-4566-b67c-c656d627469c",
      "title": "",
      "fullFile": "C:\\Users\\GIGABYTE\\Desktop\\PFE GRDF-tracker\\GRDF\\selenium-tests\\login.spec.js",
      "file": "\\selenium-tests\\login.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "81876790-fa1f-4519-ba2b-3e737be0586f",
          "title": "  ðŸ§ª GRDF Client: Signaler une dÃ©faillance",
          "fullFile": "C:\\Users\\GIGABYTE\\Desktop\\PFE GRDF-tracker\\GRDF\\selenium-tests\\login.spec.js",
          "file": "\\selenium-tests\\login.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"  ðŸ§ª GRDF Client: Signaler une dÃ©faillance\"",
              "fullTitle": "  ðŸ§ª GRDF Client: Signaler une dÃ©faillance \"before all\" hook in \"  ðŸ§ª GRDF Client: Signaler une dÃ©faillance\"",
              "timedOut": false,
              "duration": 541,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chromedriverPath = require('chromedriver').path;\nconst service = new chrome.ServiceBuilder(chromedriverPath);\nconst options = new chrome.Options();\noptions.setChromeBinaryPath('C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe');\noptions.addArguments('--no-sandbox');\noptions.addArguments('--disable-dev-shm-usage');\ndriver = await new Builder()\n  .forBrowser('chrome')\n  .setChromeService(service)\n  .setChromeOptions(options)\n  .build();",
              "err": {},
              "uuid": "d3eb9c26-c3bd-4d08-bdbd-787f143e7014",
              "parentUUID": "81876790-fa1f-4519-ba2b-3e737be0586f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"  ðŸ§ª GRDF Client: Signaler une dÃ©faillance\"",
              "fullTitle": "  ðŸ§ª GRDF Client: Signaler une dÃ©faillance \"after all\" hook in \"  ðŸ§ª GRDF Client: Signaler une dÃ©faillance\"",
              "timedOut": false,
              "duration": 5066,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  await driver.sleep(5000);\n  await driver.quit();\n}",
              "err": {},
              "uuid": "0c95812c-498a-4af4-9460-75dcef8d9b25",
              "parentUUID": "81876790-fa1f-4519-ba2b-3e737be0586f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should login and signal a defaillance correctly",
              "fullTitle": "  ðŸ§ª GRDF Client: Signaler une dÃ©faillance should login and signal a defaillance correctly",
              "timedOut": false,
              "duration": 3153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:4200');\nawait driver.findElement(By.name('email')).sendKeys('newclient@mail.com');\nawait driver.findElement(By.name('password')).sendKeys('12345');\nawait driver.findElement(By.css('button[type=\"submit\"]')).click();\nawait driver.wait(until.urlContains('/client'), 5000);\nconst defaillanceBtn = await driver.findElement(By.xpath(\"//button[contains(text(),'Signaler une dÃ©faillance')]\"));\nawait defaillanceBtn.click();\nawait driver.wait(until.urlContains('/client/report-issue'), 5000);\nconst adresseInput = await driver.findElement(By.id('houseAddress'));\nawait adresseInput.clear();\nawait adresseInput.sendKeys('Rue de la Tour, 75001 Paris');\nconst urgenceSelect = await driver.findElement(By.id('urgence'));\nawait urgenceSelect.click();\nawait driver.findElement(By.xpath(\"//option[contains(text(),'Non urgente')]\")).click();\nconst descTextArea = await driver.findElement(By.id('description'));\nawait descTextArea.sendKeys('ProblÃ¨me de fuite de gaz dÃ©tectÃ©');\nconst submitBtn = await driver.findElement(By.css('button[type=\\\"submit\\\"]'));\nawait submitBtn.click();\nawait driver.wait(until.urlContains('/client/demander-technicien'), 5000);\nconst currentUrl = await driver.getCurrentUrl();\nexpect(currentUrl).to.include('/client/demander-technicien');",
              "err": {},
              "uuid": "a28713c4-7ca8-4a3d-9359-fbb4b6c9f396",
              "parentUUID": "81876790-fa1f-4519-ba2b-3e737be0586f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a28713c4-7ca8-4a3d-9359-fbb4b6c9f396"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3153,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}